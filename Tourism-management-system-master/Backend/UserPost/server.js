import express from "express";
import helmet from "helmet";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import csrf from "csurf"; // Import csrf middleware
import cookieParser from "cookie-parser"; // To parse cookies (required for csrf)

const filePath = fileURLToPath(import.meta.url);
const dirName = path.dirname(filePath);
const app = express();
const PORT = process.env.PORT || 9030;

// Use Helmet middleware to secure HTTP headers. This can secure Express app by setting various HTTP headers.
app.use(helmet());

// Middleware setup
app.use(express.static(path.join(dirName, "uploads")));
app.use(express.static(path.join(dirName, "UploadUserPostImages")));

dotenv.config();
app.use(cors());
app.use(bodyParser.json());
app.use(cookieParser()); // Use cookie-parser to parse cookies

// CSRF protection middleware setup
const csrfProtection = csrf({ cookie: true }); // Enable CSRF protection with cookies
app.use(csrfProtection); // Apply CSRF protection to all routes

// Mongoose connection
const URL = process.env.MONGODB_URL;

mongoose.connect(URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.listen(PORT, () => {
  console.log("***************************************");
  console.log(`Server Running on port number : ${PORT}`);
});

const connection = mongoose.connection;
connection.once("open", () => {
  console.log("MONGO_DB Connection successful......!!");
  console.log("***************************************");
});

// CSRF token route (for forms or clients that need the token)
app.get("/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

// Routes
import userPost from "./Routes/User-Post-Routes.js";
app.use("/userPost", userPost);
