import express from "express";
import helmet from "helmet";
import mongoose from "mongoose";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
import cookieParser from "cookie-parser";
import csrf from "csurf";

const filePath = fileURLToPath(import.meta.url);
const dirName = path.dirname(filePath);
const app = express();
const PORT = process.env.PORT || 9020;

// Disable x-powered-by header to prevent information exposure
app.disable('x-powered-by');

// Use Helmet middleware to secure HTTP headers. This can secure Express app by setting various HTTP headers.
app.use(helmet());

// Serve static files from the "uploads" and "UploadUserPostImages" directories
app.use(express.static(path.join(dirName, "uploads")));
app.use(express.static(path.join(dirName, "UploadUserPostImages")));

dotenv.config();

// Set up middleware
app.use(cors());
app.use(bodyParser.json());
app.use(cookieParser()); // Add cookie parser middleware

// Set up CSRF protection middleware
const csrfProtection = csrf({ 
  cookie: {
    httpOnly: true, // Prevent JavaScript from accessing the CSRF cookie
    secure: process.env.NODE_ENV === "production", // Send cookie only over HTTPS in production
    sameSite: "strict" // Prevent CSRF attacks from other sites
  } 
});
app.use(csrfProtection);

// Route to get CSRF token
app.get("/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() });
});

const URL = process.env.MONGODB_URL;

// Mongoose connection
mongoose.connect(URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.listen(PORT, () => {
  console.log("***************************************");
  console.log(`Server Running on port number : ${PORT}`);
});

const connection = mongoose.connection;
connection.once("open", () => {
  console.log("MONGO_DB Connection successful......!!");
  console.log("***************************************");
});

// User account routes
import userAccount from "./Routes/User-Account-Routes.js";
app.use("/user", userAccount);








// import express from "express";
// import mongoose from "mongoose";
// import bodyParser from "body-parser";
// import cors from "cors";
// import dotenv from "dotenv";
// import path from "path";
// import { fileURLToPath } from "url";
// import passport from "passport";
// import Googlestrategy from "passport-google-oauth20";
// import session from "express-session";

// const filePath = fileURLToPath(import.meta.url);
// const dirName = path.dirname(filePath);
// const app = express();
// const PORT = process.env.PORT || 9020;
// app.use(express.static(path.join(dirName, "uploads")));

// const filePath1 = fileURLToPath(import.meta.url);
// const dirName1 = path.dirname(filePath1);
// app.use(express.static(path.join(dirName1, "UploadUserPostImages")));

// dotenv.config();
// app.use(cors());
// app.use(bodyParser.json());

// const URL = process.env.MONGODB_URL;

// mongoose.connect(URL, {
//   useNewUrlParser: true,
//   useUnifiedTopology: true,
// });

// app.listen(PORT, () => {
//   console.log("*");
//   // console.log(Server Running on port number : ${PORT});
// });

// const connection = mongoose.connection;
// connection.once("open", () => {
//   console.log("MONGO_DB Connection successfull......!!");
//   console.log("*");
// });

// //sajindu
// import userAccount from "./Routes/User-Account-Routes.js";
// app.use("/user", userAccount);

// passport.use(
//   new Googlestrategy(
//     {
//       clientID: process.env.GOOGLE_CLIENT_ID,
//       clientsecret: process.env.GOOGLE_CLIENT_SECRET,
//       callbackURL: "http://localhost:5173/auth/google/callback",
//     },
//     async (accessToken, refreshToken, profile, done) => {
//       if (await getUserByStringId(profi1e.id)) {
//         debugServer("User already exists in database");
//       } else {
//         debugServer("Adding user to database");
//         addUser(profile);
//       }
//       return done(null, profile);
//     }
//   )
// );

// passport.serializeUser((user, done) => {
//   done(null, user);
// });

// passport.deserializeUser((user, done) => {
//   done(null, user);
// });

// app.use(
//   session({
//     secret: process.env.SESSION_SECRET,
//     resave: true,
//     saveUninitialized: true,
//     cookie: { maxAge: 1000 * 60 * 60 },
//   })
// );

// app.use(passport.initialize());
// app.use(passport.session());

// app.get("auth/google", passport.authenticate("google", { scope: ["profile"] }));

// app.get(
//   "auth/google/callback",
//   passport.authenticate("google", { failureRedirect: "/login" }),
//   function (req, res) {
//     res.redirect("/");
//   }
// );

// app.get("/logout", (req, res) => {
//   req.logout();
//   req.session.destroy((err) => {
//     if (err) {
//       console.error(
//         "Error : Failed to destroy the session during logout.",
//         err
//       );
//       return res.status(500).send("Internal Server Error");
//     }
//     res.clearCookie("connect.sid");
//     res.redirect("/");
//   });
//   res.redirect("/");
// });

// app.get("/profile", (req, res) => {
//   if (req.isAuthenticated()) {
//     res.send(
//       // <h1>Profile</h1><p>Welcome ${req.user.displayName}</p><a href="/logout">Logout</a>
//     );
//   } else {
//     res.redirect("/");
//   }
// });
